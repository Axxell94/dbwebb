Lär Marvin att hantera listor. Skapa funktionen pick som tar emot tre argument, den första skall vara ryggsäcken, 
den andra skall vara saken man skall plocka upp och den tredje skall vara en optionell parameter som säger vilken position (index)-
saken skall lägga sig i (som en string). Funktionen ska lägga till saken i listan, 
om position skickas med ska saken tryckas in på den platsen (du ska inte ersätta det som redan ligger på den platsen, 
de sakerna ska flyttas ett index åt höger). Om position inte skickas med ska saken läggas till sist i ryggsäcken. 
Funktionen skall returnera den uppdaterade ryggsäcken.

I main.py skall du lägga till stöd för kommandot “inv pick” enligt tabellen nedan. 
Om allt gick bra skall du skriva ut ett passande meddelande som innehåller vad som lades till i ryggsäcken
och på vilken position om ett index är givet. Meddelandet skall skivas ut i funktionen och inte main programmet.


def pick(bag, thing, i=None): #):position="" fungerar också, iaf med en index-värde
    """lägg till något i ryggan"""
    if i==None:
        bag.append(thing)
        väskan=f"{thing} has been added"
        print(väskan)

    try:
        place=int(i)
    
        bag.insert(place,thing)
        väskan = f"{thing} has been added in index {i}"
        print(väskan)

    except IndexError: 
        print(f"Error with {position}")
        return bag

    return bag

def main():
    stop=False
    while not stop:
        
        choice = input("--> ")
        
        
        if choice == "q":
            stop= Ture

          elif "inv pick" in choice:
            choices = choice.split(" ")
            if len(choices) == 4:
                pick(bag, choices[2], choices[3])
            if len(choices) == 3:
                pick(bag, choices[2])   # Finns det annat bra sätta att koda detta på? 

        elif "inv drop" in choice:
            drop(bag, "thing")
            
        elif "inv swap" in choice:
            swap(bag, thing1, thing2) 





if __name__ == "__main__":
    main()
